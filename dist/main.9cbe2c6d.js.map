{"version":3,"sources":["main.js"],"names":["$lastLi","$","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.9cbe2c6d.js","sourceRoot":"../src","sourcesContent":["const $lastLi = $('.last')\nconst x = localStorage.getItem('x') // 获取本地储存的数据。\nconst xObject = JSON.parse(x) // 将字符串类型的数据转化成对象类型。\n\n// hashMap 为含有哈希表的数组；\n// xObject 不存在时，执行后面的语句。 xObject 存在时，执行 xObject 。\nconst hashMap = xObject || [   \n    {logo: 'A', url: 'https://www.acfun.cn'},\n    {logo: 'B', url: 'https://www.bilibili.com'}\n]\n\n// 简化 url ，删除 url 里的 'https://'，'http://'，'www.' 和以 / 开头的内容。\nconst simplifyUrl = (url) =>{\n    return url.replace('https://', '')\n        .replace('http://', '')\n        .replace('www.', '')\n        .replace(/\\/.*/, '') // 用正则删除（最外层的两个 / 为正则符号；\\ 为转义符号，避免和正则符号混淆；/.* 表示以 / 开头的内容）\n}\n\nconst render = () => {\n    // 每次渲染 hashMap 之前，把除最后一个 list 外的 list 都清除。否则，之前的 list 会重复渲染。\n    $('li:not(.last)').remove()\n    hashMap.forEach((node, index) => {\n        // 每次将新增的网址 list 插入到“新增网站”的前面。\n        const $li = $(`<li>\n            <div class=\"site\">\n                <div class=\"logo\">${node.logo}</div>\n                <div class=\"link\">${simplifyUrl(node.url)}</div>\n                <div class=\"close\">\n                    <svg class=\"icon\">\n                        <use xlink:href=\"#icon-close\"></use>\n                    </svg>\n                </div>\n            </div> \n        </li>`).insertBefore($lastLi) \n        // 当点击 list 里的 close 时，阻止冒泡，即阻止跳转链接。并且删除这个list。\n        $li.on('click', () => {\n            window.open(node.url)\n        })\n        $li.on('click', '.close', (e) => {\n            e.stopPropagation() \n            hashMap.splice(index, 1) \n            render()\n        })  \n    })   \n}\n\nrender() // 初始化渲染。\n\n// 监听 .addButton 的 click 事件\n$('.addButton')\n  .on('click',() => {\n      // 当用户点击时，弹出对话框提示下述文字内容，然后将用户在对话框里输入的网址赋值给 url 。\n      let url = window.prompt('请输入要添加的网址') \n      // 如果用户输入的网址的开头不含 http ，则给网址加上 https:// 后再赋值给url。\n      if (url.indexOf('http') != 0) {  \n          url = 'https://' + url\n      }\n      // 把新增的网址 list 放进 hashMap 里。 \n      hashMap.push({\n          logo: simplifyUrl(url)[0].toUpperCase(), // toUpperCase 表示转化成大写字母\n          url: url\n      }) \n      render()\n  })\n\n// 用户离开当前页面时，调用下面的函数。\nwindow.onbeforeunload = () => { \n    const string = JSON.stringify(hashMap) // 把对象类型的数据转化成字符串类型。\n    localStorage.setItem('x', string) // 把数据储存在本地。\n}\n\n// 监听键盘事件，当用户按键盘的某个字母，打开对应字母的网址。\n$(document).on('keypress', (e) => {\n    const {key} = e // 解构赋值，表示 key = e.key 的简写；获取按键盘的字母。\n    for (let i = 0; i < hashMap.length; i++) {\n        if (hashMap[i].logo.toLowerCase() === key) {\n            window.open(hashMap[i].url)\n        }\n    }\n})"]}